<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on 随记</title><link>/tags/security/</link><description>Recent content in Security on 随记</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 20 Sep 2021 20:45:21 +0800</lastBuildDate><atom:link href="/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>《BeyondCorp: A New Approach to Enterprise Security》总结</title><link>/posts/beyond-corp-and-zero-trust/</link><pubDate>Mon, 20 Sep 2021 20:45:21 +0800</pubDate><guid>/posts/beyond-corp-and-zero-trust/</guid><description>&lt;p&gt;零信任网络架构的研究由来已久，Google 的这篇 BeyondCorp 论文让这个概念广为认知，毕竟 Google 名气太大。这篇工程实践论文可读性很好，对企业办公网络的安全设计实操非常有帮助，总结一下关键点：&lt;/p&gt;</description></item><item><title>OAuth 和 OpenID Connect</title><link>/posts/oauth-and-openid-connect/</link><pubDate>Tue, 15 Dec 2020 23:00:00 +0800</pubDate><guid>/posts/oauth-and-openid-connect/</guid><description>&lt;h2 id="1-参考"&gt;1. 参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://oauth.net/2/"&gt;https://oauth.net/2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openid.net/developers/specs/"&gt;https://openid.net/developers/specs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.keycloak.org/documentation.html"&gt;https://www.keycloak.org/documentation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-选型"&gt;2. 选型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API Gateway: &lt;a href="https://landscape.cncf.io/category=api-gateway&amp;amp;format=card-mode&amp;amp;grouping=category"&gt;https://landscape.cncf.io/category=api-gateway&amp;amp;format=card-mode&amp;amp;grouping=category&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenID Provider Server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/keycloak/keycloak"&gt;Keycloak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ory/hydra"&gt;Hydra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenID Provider Library&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NodeJS&lt;/strong&gt;: &lt;a href="https://www.npmjs.com/package/oidc-provider"&gt;https://www.npmjs.com/package/oidc-provider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relying Party Server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nginx + zmartzone/&lt;a href="https://luarocks.org/modules/hanszandbelt/lua-resty-openidc"&gt;lua-resty-openidc&lt;/a&gt;(OpenID &lt;a href="https://openid.net/developers/certified/"&gt;官方认证&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;APISIX&lt;/strong&gt;: &lt;a href="https://github.com/apache/apisix/blob/master/doc/plugins/openid-connect.md"&gt;https://github.com/apache/apisix/blob/master/doc/plugins/openid-connect.md&lt;/a&gt; (还有个 &lt;a href="https://github.com/apache/apisix/blob/master/doc/plugins/authz-keycloak.md"&gt;authz-keycloak&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kong&lt;/strong&gt; + nokia/kong-oidc: &lt;a href="https://github.com/nokia/kong-oidc"&gt;https://github.com/nokia/kong-oidc&lt;/a&gt; ， 有两个值得关注的 fork: &lt;a href="https://luarocks.org/modules/larsw/kong-enhanced-oidc"&gt;kong-enhanced-oidc&lt;/a&gt;, &lt;a href="https://luarocks.org/modules/JoshTheGoldfish/kong-oidc"&gt;JoshTheGoldfish/kong-oidc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nginx + 自行实现 Lua 插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kong&lt;/strong&gt; + openid-connect(商业版): &lt;a href="https://docs.konghq.com/hub/kong-inc/openid-connect/"&gt;https://docs.konghq.com/hub/kong-inc/openid-connect/&lt;/a&gt; (开源版里的 &lt;a href="https://docs.konghq.com/hub/kong-inc/oauth2/"&gt;oauth2&lt;/a&gt; 不支持 OIDC)&lt;/li&gt;
&lt;li&gt;Gluu gateway: &lt;a href="https://github.com/GluuFederation/gluu-gateway/tree/version_4.2.1/lib/kong/plugins/gluu-openid-connect"&gt;https://github.com/GluuFederation/gluu-gateway/tree/version_4.2.1/lib/kong/plugins/gluu-openid-connect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3scale APIcast: &lt;a href="https://github.com/3scale/APIcast/blob/master/gateway/src/apicast/oauth/oidc.lua"&gt;https://github.com/3scale/APIcast/blob/master/gateway/src/apicast/oauth/oidc.lua&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoy&lt;/p&gt;</description></item><item><title>Java 的 X.509 证书吊销检查</title><link>/posts/check-x509-certification-revocation-in-java/</link><pubDate>Thu, 15 Aug 2019 22:47:12 +0800</pubDate><guid>/posts/check-x509-certification-revocation-in-java/</guid><description>&lt;p&gt;在使用 TLS 协议加密通讯时，CA 证书文件、服务端和客户端的证书文件和私钥文件如何配置是最基本的，但对证书吊销检查的配置则文档甚少，甚至许多程序并不支持，下面总结下在 Java 中如何做 X.509 证书的吊销检查。&lt;/p&gt;</description></item></channel></rss>